// hamowanie_v2.cpp : Ten plik zawiera funkcję „main”. W nim rozpoczyna się i kończy wykonywanie programu.
//

//--------------------------------------------------------------------------------
// Code generated by jFuzzyLogic
// jFuzzyLogic Version : JFuzzyLogic 3.3 (build 2015-04-09), by Pablo Cingolani 
// jFuzzyLogic creted by Pablo Cingolani
//--------------------------------------------------------------------------------


#include <stdio.h>
#include <cstdlib>
#include <ctime>
#include <stdlib.h>
double ruleAccumulationMethod_max(double defuzzifierValue, double valueToAggregate) { return (defuzzifierValue > valueToAggregate ? defuzzifierValue : valueToAggregate); }

double ruleActivationMethod_min(double degreeOfSupport, double membership) { return (degreeOfSupport < membership ? degreeOfSupport : membership); }

double ruleConnectionMethod_and(double antecedent1, double antecedent2) { return (antecedent1 < antecedent2 ? antecedent1 : antecedent2); }

class FunctionBlock_car1 {

public:
	// VAR_INPUT
	double dystans;
	double predkosc;

	// VAR_OUTPUT
	double zmiana_predkosci;

private:
	// FUZZIFY dystans
	double dystans_bdlugi;
	double dystans_bkrotki;
	double dystans_dlugi;
	double dystans_krotki;
	double dystans_sredni;

	// FUZZIFY predkosc
	double predkosc_bduza;
	double predkosc_bmala;
	double predkosc_duza;
	double predkosc_mala;
	double Predkoscrednia;


	// DEFUZZIFY zmiana_predkosci
	double defuzzify_zmiana_predkosci[1000];


public:
	FunctionBlock_car1(double droga, double predkosc);
	void calc();
	void print();

	void PrintThis();
	double GetSpeed();
	double getSpeedChange();
	void setOdleglosc(double x);
	void SetSpeed(double x);
private:
	void defuzzify();
	void fuzzify();
	void reset();

	double membership_dystans_bdlugi(double x);
	double membership_dystans_bkrotki(double x);
	double membership_dystans_dlugi(double x);
	double membership_dystans_krotki(double x);
	double membership_dystans_sredni(double x);
	double membership_predkosc_bduza(double x);
	double membership_predkosc_bmala(double x);
	double membership_predkosc_duza(double x);
	double membership_predkosc_mala(double x);
	double membership_Predkoscrednia(double x);
	double membership_zmiana_predkosci_bbredukuj(double x);
	double membership_zmiana_predkosci_bredukuj(double x);
	double membership_zmiana_predkosci_bzwiekszaj(double x);
	double membership_zmiana_predkosci_redukuj(double x);
	double membership_zmiana_predkosci_utrzymaj(double x);
	double membership_zmiana_predkosci_zwiekszaj(double x);
	void calc_No1();

};

// Constructor
FunctionBlock_car1::FunctionBlock_car1(double droga, double predkosc) {
	zmiana_predkosci = 0.0;
	this->dystans = droga;
	this->predkosc = predkosc;
}
double FunctionBlock_car1::GetSpeed()
{
	return predkosc;
}

double FunctionBlock_car1::getSpeedChange()
{
	return zmiana_predkosci;
}

void FunctionBlock_car1::setOdleglosc(double x)
{
	this->dystans = x;
}

void FunctionBlock_car1::SetSpeed(double x)
{
	this->predkosc = x;
}
// Calculate function block
void FunctionBlock_car1::calc() {
	reset();
	fuzzify();
	calc_No1();
	defuzzify();
}

// RULEBLOCK No1
void FunctionBlock_car1::calc_No1() {
	// RULE 1 : IF (dystans IS krotki) AND (predkosc IS bmala) THEN zmiana_predkosci IS zwiekszaj;
	double degreeOfSupport_1 = 1.0 * (ruleConnectionMethod_and(dystans_krotki, predkosc_bmala));
	if (degreeOfSupport_1 > 0) {
		for (int i = 0; i < 1000; i++) {
			double x = -120.0 + i * 0.24;
			double membership = membership_zmiana_predkosci_zwiekszaj(x);
			double y = ruleActivationMethod_min(degreeOfSupport_1, membership);
			defuzzify_zmiana_predkosci[i] += ruleAccumulationMethod_max(defuzzify_zmiana_predkosci[i], y);
		}
	}

	// RULE 2 : IF (dystans IS krotki) AND (predkosc IS mala) THEN zmiana_predkosci IS utrzymaj;
	double degreeOfSupport_2 = 1.0 * (ruleConnectionMethod_and(dystans_krotki, predkosc_mala));
	if (degreeOfSupport_2 > 0) {
		for (int i = 0; i < 1000; i++) {
			double x = -120.0 + i * 0.24;
			double membership = membership_zmiana_predkosci_utrzymaj(x);
			double y = ruleActivationMethod_min(degreeOfSupport_2, membership);
			defuzzify_zmiana_predkosci[i] += ruleAccumulationMethod_max(defuzzify_zmiana_predkosci[i], y);
		}
	}

	// RULE 3 : IF (dystans IS krotki) AND (predkosc IS srednia) THEN zmiana_predkosci IS redukuj;
	double degreeOfSupport_3 = 1.0 * (ruleConnectionMethod_and(dystans_krotki, Predkoscrednia));
	if (degreeOfSupport_3 > 0) {
		for (int i = 0; i < 1000; i++) {
			double x = -120.0 + i * 0.24;
			double membership = membership_zmiana_predkosci_redukuj(x);
			double y = ruleActivationMethod_min(degreeOfSupport_3, membership);
			defuzzify_zmiana_predkosci[i] += ruleAccumulationMethod_max(defuzzify_zmiana_predkosci[i], y);
		}
	}

	// RULE 4 : IF (dystans IS krotki) AND (predkosc IS duza) THEN zmiana_predkosci IS bredukuj;
	double degreeOfSupport_4 = 1.0 * (ruleConnectionMethod_and(dystans_krotki, predkosc_duza));
	if (degreeOfSupport_4 > 0) {
		for (int i = 0; i < 1000; i++) {
			double x = -120.0 + i * 0.24;
			double membership = membership_zmiana_predkosci_bredukuj(x);
			double y = ruleActivationMethod_min(degreeOfSupport_4, membership);
			defuzzify_zmiana_predkosci[i] += ruleAccumulationMethod_max(defuzzify_zmiana_predkosci[i], y);
		}
	}

	// RULE 5 : IF (dystans IS krotki) AND (predkosc IS bduza) THEN zmiana_predkosci IS bbredukuj;
	double degreeOfSupport_5 = 1.0 * (ruleConnectionMethod_and(dystans_krotki, predkosc_bduza));
	if (degreeOfSupport_5 > 0) {
		for (int i = 0; i < 1000; i++) {
			double x = -120.0 + i * 0.24;
			double membership = membership_zmiana_predkosci_bbredukuj(x);
			double y = ruleActivationMethod_min(degreeOfSupport_5, membership);
			defuzzify_zmiana_predkosci[i] += ruleAccumulationMethod_max(defuzzify_zmiana_predkosci[i], y);
		}
	}

	// RULE 6 : IF (dystans IS bkrotki) AND (predkosc IS bmala) THEN zmiana_predkosci IS utrzymaj;
	double degreeOfSupport_6 = 1.0 * (ruleConnectionMethod_and(dystans_bkrotki, predkosc_bmala));
	if (degreeOfSupport_6 > 0) {
		for (int i = 0; i < 1000; i++) {
			double x = -120.0 + i * 0.24;
			double membership = membership_zmiana_predkosci_utrzymaj(x);
			double y = ruleActivationMethod_min(degreeOfSupport_6, membership);
			defuzzify_zmiana_predkosci[i] += ruleAccumulationMethod_max(defuzzify_zmiana_predkosci[i], y);
		}
	}

	// RULE 7 : IF (dystans IS bkrotki) AND (predkosc IS mala) THEN zmiana_predkosci IS redukuj;
	double degreeOfSupport_7 = 1.0 * (ruleConnectionMethod_and(dystans_bkrotki, predkosc_mala));
	if (degreeOfSupport_7 > 0) {
		for (int i = 0; i < 1000; i++) {
			double x = -120.0 + i * 0.24;
			double membership = membership_zmiana_predkosci_redukuj(x);
			double y = ruleActivationMethod_min(degreeOfSupport_7, membership);
			defuzzify_zmiana_predkosci[i] += ruleAccumulationMethod_max(defuzzify_zmiana_predkosci[i], y);
		}
	}

	// RULE 8 : IF (dystans IS bkrotki) AND (predkosc IS srednia) THEN zmiana_predkosci IS bredukuj;
	double degreeOfSupport_8 = 1.0 * (ruleConnectionMethod_and(dystans_bkrotki, Predkoscrednia));
	if (degreeOfSupport_8 > 0) {
		for (int i = 0; i < 1000; i++) {
			double x = -120.0 + i * 0.24;
			double membership = membership_zmiana_predkosci_bredukuj(x);
			double y = ruleActivationMethod_min(degreeOfSupport_8, membership);
			defuzzify_zmiana_predkosci[i] += ruleAccumulationMethod_max(defuzzify_zmiana_predkosci[i], y);
		}
	}

	// RULE 9 : IF (dystans IS bkrotki) AND (predkosc IS duza) THEN zmiana_predkosci IS bbredukuj;
	double degreeOfSupport_9 = 1.0 * (ruleConnectionMethod_and(dystans_bkrotki, predkosc_duza));
	if (degreeOfSupport_9 > 0) {
		for (int i = 0; i < 1000; i++) {
			double x = -120.0 + i * 0.24;
			double membership = membership_zmiana_predkosci_bbredukuj(x);
			double y = ruleActivationMethod_min(degreeOfSupport_9, membership);
			defuzzify_zmiana_predkosci[i] += ruleAccumulationMethod_max(defuzzify_zmiana_predkosci[i], y);
		}
	}

	// RULE 10 : IF (dystans IS bkrotki) AND (predkosc IS bduza) THEN zmiana_predkosci IS bbredukuj;
	double degreeOfSupport_10 = 1.0 * (ruleConnectionMethod_and(dystans_bkrotki, predkosc_bduza));
	if (degreeOfSupport_10 > 0) {
		for (int i = 0; i < 1000; i++) {
			double x = -120.0 + i * 0.24;
			double membership = membership_zmiana_predkosci_bbredukuj(x);
			double y = ruleActivationMethod_min(degreeOfSupport_10, membership);
			defuzzify_zmiana_predkosci[i] += ruleAccumulationMethod_max(defuzzify_zmiana_predkosci[i], y);
		}
	}

	// RULE 11 : IF (dystans IS sredni) AND (predkosc IS bmala) THEN zmiana_predkosci IS bzwiekszaj;
	double degreeOfSupport_11 = 1.0 * (ruleConnectionMethod_and(dystans_sredni, predkosc_bmala));
	if (degreeOfSupport_11 > 0) {
		for (int i = 0; i < 1000; i++) {
			double x = -120.0 + i * 0.24;
			double membership = membership_zmiana_predkosci_bzwiekszaj(x);
			double y = ruleActivationMethod_min(degreeOfSupport_11, membership);
			defuzzify_zmiana_predkosci[i] += ruleAccumulationMethod_max(defuzzify_zmiana_predkosci[i], y);
		}
	}

	// RULE 12 : IF (dystans IS sredni) AND (predkosc IS mala) THEN zmiana_predkosci IS zwiekszaj;
	double degreeOfSupport_12 = 1.0 * (ruleConnectionMethod_and(dystans_sredni, predkosc_mala));
	if (degreeOfSupport_12 > 0) {
		for (int i = 0; i < 1000; i++) {
			double x = -120.0 + i * 0.24;
			double membership = membership_zmiana_predkosci_zwiekszaj(x);
			double y = ruleActivationMethod_min(degreeOfSupport_12, membership);
			defuzzify_zmiana_predkosci[i] += ruleAccumulationMethod_max(defuzzify_zmiana_predkosci[i], y);
		}
	}

	// RULE 13 : IF (dystans IS sredni) AND (predkosc IS srednia) THEN zmiana_predkosci IS utrzymaj;
	double degreeOfSupport_13 = 1.0 * (ruleConnectionMethod_and(dystans_sredni, Predkoscrednia));
	if (degreeOfSupport_13 > 0) {
		for (int i = 0; i < 1000; i++) {
			double x = -120.0 + i * 0.24;
			double membership = membership_zmiana_predkosci_utrzymaj(x);
			double y = ruleActivationMethod_min(degreeOfSupport_13, membership);
			defuzzify_zmiana_predkosci[i] += ruleAccumulationMethod_max(defuzzify_zmiana_predkosci[i], y);
		}
	}

	// RULE 14 : IF (dystans IS sredni) AND (predkosc IS duza) THEN zmiana_predkosci IS redukuj;
	double degreeOfSupport_14 = 1.0 * (ruleConnectionMethod_and(dystans_sredni, predkosc_duza));
	if (degreeOfSupport_14 > 0) {
		for (int i = 0; i < 1000; i++) {
			double x = -120.0 + i * 0.24;
			double membership = membership_zmiana_predkosci_redukuj(x);
			double y = ruleActivationMethod_min(degreeOfSupport_14, membership);
			defuzzify_zmiana_predkosci[i] += ruleAccumulationMethod_max(defuzzify_zmiana_predkosci[i], y);
		}
	}

	// RULE 15 : IF (dystans IS sredni) AND (predkosc IS bduza) THEN zmiana_predkosci IS bredukuj;
	double degreeOfSupport_15 = 1.0 * (ruleConnectionMethod_and(dystans_sredni, predkosc_bduza));
	if (degreeOfSupport_15 > 0) {
		for (int i = 0; i < 1000; i++) {
			double x = -120.0 + i * 0.24;
			double membership = membership_zmiana_predkosci_bredukuj(x);
			double y = ruleActivationMethod_min(degreeOfSupport_15, membership);
			defuzzify_zmiana_predkosci[i] += ruleAccumulationMethod_max(defuzzify_zmiana_predkosci[i], y);
		}
	}

	// RULE 16 : IF (dystans IS dlugi) AND (predkosc IS bmala) THEN zmiana_predkosci IS bzwiekszaj;
	double degreeOfSupport_16 = 1.0 * (ruleConnectionMethod_and(dystans_dlugi, predkosc_bmala));
	if (degreeOfSupport_16 > 0) {
		for (int i = 0; i < 1000; i++) {
			double x = -120.0 + i * 0.24;
			double membership = membership_zmiana_predkosci_bzwiekszaj(x);
			double y = ruleActivationMethod_min(degreeOfSupport_16, membership);
			defuzzify_zmiana_predkosci[i] += ruleAccumulationMethod_max(defuzzify_zmiana_predkosci[i], y);
		}
	}

	// RULE 17 : IF (dystans IS dlugi) AND (predkosc IS mala) THEN zmiana_predkosci IS bzwiekszaj;
	double degreeOfSupport_17 = 1.0 * (ruleConnectionMethod_and(dystans_dlugi, predkosc_mala));
	if (degreeOfSupport_17 > 0) {
		for (int i = 0; i < 1000; i++) {
			double x = -120.0 + i * 0.24;
			double membership = membership_zmiana_predkosci_bzwiekszaj(x);
			double y = ruleActivationMethod_min(degreeOfSupport_17, membership);
			defuzzify_zmiana_predkosci[i] += ruleAccumulationMethod_max(defuzzify_zmiana_predkosci[i], y);
		}
	}

	// RULE 18 : IF (dystans IS dlugi) AND (predkosc IS srednia) THEN zmiana_predkosci IS zwiekszaj;
	double degreeOfSupport_18 = 1.0 * (ruleConnectionMethod_and(dystans_dlugi, Predkoscrednia));
	if (degreeOfSupport_18 > 0) {
		for (int i = 0; i < 1000; i++) {
			double x = -120.0 + i * 0.24;
			double membership = membership_zmiana_predkosci_zwiekszaj(x);
			double y = ruleActivationMethod_min(degreeOfSupport_18, membership);
			defuzzify_zmiana_predkosci[i] += ruleAccumulationMethod_max(defuzzify_zmiana_predkosci[i], y);
		}
	}

	// RULE 19 : IF (dystans IS dlugi) AND (predkosc IS duza) THEN zmiana_predkosci IS utrzymaj;
	double degreeOfSupport_19 = 1.0 * (ruleConnectionMethod_and(dystans_dlugi, predkosc_duza));
	if (degreeOfSupport_19 > 0) {
		for (int i = 0; i < 1000; i++) {
			double x = -120.0 + i * 0.24;
			double membership = membership_zmiana_predkosci_utrzymaj(x);
			double y = ruleActivationMethod_min(degreeOfSupport_19, membership);
			defuzzify_zmiana_predkosci[i] += ruleAccumulationMethod_max(defuzzify_zmiana_predkosci[i], y);
		}
	}

	// RULE 20 : IF (dystans IS dlugi) AND (predkosc IS bduza) THEN zmiana_predkosci IS redukuj;
	double degreeOfSupport_20 = 1.0 * (ruleConnectionMethod_and(dystans_dlugi, predkosc_bduza));
	if (degreeOfSupport_20 > 0) {
		for (int i = 0; i < 1000; i++) {
			double x = -120.0 + i * 0.24;
			double membership = membership_zmiana_predkosci_redukuj(x);
			double y = ruleActivationMethod_min(degreeOfSupport_20, membership);
			defuzzify_zmiana_predkosci[i] += ruleAccumulationMethod_max(defuzzify_zmiana_predkosci[i], y);
		}
	}

	// RULE 21 : IF (dystans IS bdlugi) AND (predkosc IS bmala) THEN zmiana_predkosci IS bzwiekszaj;
	double degreeOfSupport_21 = 1.0 * (ruleConnectionMethod_and(dystans_bdlugi, predkosc_bmala));
	if (degreeOfSupport_21 > 0) {
		for (int i = 0; i < 1000; i++) {
			double x = -120.0 + i * 0.24;
			double membership = membership_zmiana_predkosci_bzwiekszaj(x);
			double y = ruleActivationMethod_min(degreeOfSupport_21, membership);
			defuzzify_zmiana_predkosci[i] += ruleAccumulationMethod_max(defuzzify_zmiana_predkosci[i], y);
		}
	}

	// RULE 22 : IF (dystans IS bdlugi) AND (predkosc IS mala) THEN zmiana_predkosci IS bzwiekszaj;
	double degreeOfSupport_22 = 1.0 * (ruleConnectionMethod_and(dystans_bdlugi, predkosc_mala));
	if (degreeOfSupport_22 > 0) {
		for (int i = 0; i < 1000; i++) {
			double x = -120.0 + i * 0.24;
			double membership = membership_zmiana_predkosci_bzwiekszaj(x);
			double y = ruleActivationMethod_min(degreeOfSupport_22, membership);
			defuzzify_zmiana_predkosci[i] += ruleAccumulationMethod_max(defuzzify_zmiana_predkosci[i], y);
		}
	}

	// RULE 23 : IF (dystans IS bdlugi) AND (predkosc IS srednia) THEN zmiana_predkosci IS bzwiekszaj;
	double degreeOfSupport_23 = 1.0 * (ruleConnectionMethod_and(dystans_bdlugi, Predkoscrednia));
	if (degreeOfSupport_23 > 0) {
		for (int i = 0; i < 1000; i++) {
			double x = -120.0 + i * 0.24;
			double membership = membership_zmiana_predkosci_bzwiekszaj(x);
			double y = ruleActivationMethod_min(degreeOfSupport_23, membership);
			defuzzify_zmiana_predkosci[i] += ruleAccumulationMethod_max(defuzzify_zmiana_predkosci[i], y);
		}
	}

	// RULE 24 : IF (dystans IS bdlugi) AND (predkosc IS duza) THEN zmiana_predkosci IS bzwiekszaj;
	double degreeOfSupport_24 = 1.0 * (ruleConnectionMethod_and(dystans_bdlugi, predkosc_duza));
	if (degreeOfSupport_24 > 0) {
		for (int i = 0; i < 1000; i++) {
			double x = -120.0 + i * 0.24;
			double membership = membership_zmiana_predkosci_bzwiekszaj(x);
			double y = ruleActivationMethod_min(degreeOfSupport_24, membership);
			defuzzify_zmiana_predkosci[i] += ruleAccumulationMethod_max(defuzzify_zmiana_predkosci[i], y);
		}
	}

	// RULE 25 : IF (dystans IS bdlugi) AND (predkosc IS bduza) THEN zmiana_predkosci IS utrzymaj;
	double degreeOfSupport_25 = 1.0 * (ruleConnectionMethod_and(dystans_bdlugi, predkosc_bduza));
	if (degreeOfSupport_25 > 0) {
		for (int i = 0; i < 1000; i++) {
			double x = -120.0 + i * 0.24;
			double membership = membership_zmiana_predkosci_utrzymaj(x);
			double y = ruleActivationMethod_min(degreeOfSupport_25, membership);
			defuzzify_zmiana_predkosci[i] += ruleAccumulationMethod_max(defuzzify_zmiana_predkosci[i], y);
		}
	}

}

// Defuzzify 
void FunctionBlock_car1::defuzzify() {
	double sum_zmiana_predkosci = 0.0;
	double wsum_zmiana_predkosci = 0.0;
	for (int i = 0; i < 1000; i++) {
		double x = -120.0 + i * 0.24;
		sum_zmiana_predkosci += defuzzify_zmiana_predkosci[i];
		wsum_zmiana_predkosci += x * defuzzify_zmiana_predkosci[i];
	}
	zmiana_predkosci = wsum_zmiana_predkosci / sum_zmiana_predkosci;
}

// Fuzzify all variables
void FunctionBlock_car1::fuzzify() {
	dystans_bdlugi = membership_dystans_bdlugi(dystans);
	dystans_bkrotki = membership_dystans_bkrotki(dystans);
	dystans_dlugi = membership_dystans_dlugi(dystans);
	dystans_krotki = membership_dystans_krotki(dystans);
	dystans_sredni = membership_dystans_sredni(dystans);
	predkosc_bduza = membership_predkosc_bduza(predkosc);
	predkosc_bmala = membership_predkosc_bmala(predkosc);
	predkosc_duza = membership_predkosc_duza(predkosc);
	predkosc_mala = membership_predkosc_mala(predkosc);
	Predkoscrednia = membership_Predkoscrednia(predkosc);
}

// Membership functions 
double FunctionBlock_car1::membership_dystans_bdlugi(double x) {
	if (x <= 750.0)	return 0.0;
	if (x > 1000.0)	return 1.0;
	if (x <= 1000.0)	return 0.0 + (1.0 - 0.0) * ((x - 750.0) / (1000.0 - 750.0));
}

double FunctionBlock_car1::membership_dystans_bkrotki(double x) {
	if (x <= 0.0)	return 1.0;
	if (x > 60.0)	return 0.0;
	if (x <= 60.0)	return 1.0 + (0.0 - 1.0) * ((x - 0.0) / (60.0 - 0.0));
}

double FunctionBlock_car1::membership_dystans_dlugi(double x) {
	if (x <= 500.0)	return 0.0;
	if (x > 800.0)	return 0.0;
	if (x <= 650.0)	return 0.0 + (1.0 - 0.0) * ((x - 500.0) / (650.0 - 500.0));
	if (x <= 800.0)	return 1.0 + (0.0 - 1.0) * ((x - 650.0) / (800.0 - 650.0));
}

double FunctionBlock_car1::membership_dystans_krotki(double x) {
	if (x <= 50.0)	return 0.0;
	if (x > 450.0)	return 0.0;
	if (x <= 250.0)	return 0.0 + (1.0 - 0.0) * ((x - 50.0) / (250.0 - 50.0));
	if (x <= 450.0)	return 1.0 + (0.0 - 1.0) * ((x - 250.0) / (450.0 - 250.0));
}

double FunctionBlock_car1::membership_dystans_sredni(double x) {
	if (x <= 250.0)	return 0.0;
	if (x > 750.0)	return 0.0;
	if (x <= 500.0)	return 0.0 + (1.0 - 0.0) * ((x - 250.0) / (500.0 - 250.0));
	if (x <= 750.0)	return 1.0 + (0.0 - 1.0) * ((x - 500.0) / (750.0 - 500.0));
}

double FunctionBlock_car1::membership_predkosc_bduza(double x) {
	if (x <= 100.0)	return 0.0;
	if (x > 120.0)	return 1.0;
	if (x <= 120.0)	return 0.0 + (1.0 - 0.0) * ((x - 100.0) / (120.0 - 100.0));
}

double FunctionBlock_car1::membership_predkosc_bmala(double x) {
	if (x <= 0.0)	return 1.0;
	if (x > 20.0)	return 0.0;
	if (x <= 20.0)	return 1.0 + (0.0 - 1.0) * ((x - 0.0) / (20.0 - 0.0));
}

double FunctionBlock_car1::membership_predkosc_duza(double x) {
	if (x <= 75.0)	return 0.0;
	if (x > 105.0)	return 0.0;
	if (x <= 90.0)	return 0.0 + (1.0 - 0.0) * ((x - 75.0) / (90.0 - 75.0));
	if (x <= 105.0)	return 1.0 + (0.0 - 1.0) * ((x - 90.0) / (105.0 - 90.0));
}

double FunctionBlock_car1::membership_predkosc_mala(double x) {
	if (x <= 15.0)	return 0.0;
	if (x > 45.0)	return 0.0;
	if (x <= 30.0)	return 0.0 + (1.0 - 0.0) * ((x - 15.0) / (30.0 - 15.0));
	if (x <= 45.0)	return 1.0 + (0.0 - 1.0) * ((x - 30.0) / (45.0 - 30.0));
}

double FunctionBlock_car1::membership_Predkoscrednia(double x) {
	if (x <= 40.0)	return 0.0;
	if (x > 80.0)	return 0.0;
	if (x <= 60.0)	return 0.0 + (1.0 - 0.0) * ((x - 40.0) / (60.0 - 40.0));
	if (x <= 80.0)	return 1.0 + (0.0 - 1.0) * ((x - 60.0) / (80.0 - 60.0));
}

double FunctionBlock_car1::membership_zmiana_predkosci_bbredukuj(double x) {
	if (x <= -120.0)	return 1.0;
	if (x > -115.0)	return 0.0;
	if (x <= -115.0)	return 1.0 + (0.0 - 1.0) * ((x - -120.0) / (-115.0 - -120.0));
}

double FunctionBlock_car1::membership_zmiana_predkosci_bredukuj(double x) {
	if (x <= -120.0)	return 0.0;
	if (x > -60.0)	return 0.0;
	if (x <= -100.0)	return 0.0 + (1.0 - 0.0) * ((x - -120.0) / (-100.0 - -120.0));
	if (x <= -60.0)	return 1.0 + (0.0 - 1.0) * ((x - -100.0) / (-60.0 - -100.0));
}

double FunctionBlock_car1::membership_zmiana_predkosci_bzwiekszaj(double x) {
	if (x <= 75.0)	return 0.0;
	if (x > 120.0)	return 1.0;
	if (x <= 120.0)	return 0.0 + (1.0 - 0.0) * ((x - 75.0) / (120.0 - 75.0));
}

double FunctionBlock_car1::membership_zmiana_predkosci_redukuj(double x) {
	if (x <= -70.0)	return 0.0;
	if (x > -30.0)	return 0.0;
	if (x <= -50.0)	return 0.0 + (1.0 - 0.0) * ((x - -70.0) / (-50.0 - -70.0));
	if (x <= -30.0)	return 1.0 + (0.0 - 1.0) * ((x - -50.0) / (-30.0 - -50.0));
}

double FunctionBlock_car1::membership_zmiana_predkosci_utrzymaj(double x) {
	if (x <= -60.0)	return 0.0;
	if (x > 60.0)	return 0.0;
	if (x <= 0.0)	return 0.0 + (1.0 - 0.0) * ((x - -60.0) / (0.0 - -60.0));
	if (x <= 60.0)	return 1.0 + (0.0 - 1.0) * ((x - 0.0) / (60.0 - 0.0));
}

double FunctionBlock_car1::membership_zmiana_predkosci_zwiekszaj(double x) {
	if (x <= 30.0)	return 0.0;
	if (x > 100.0)	return 0.0;
	if (x <= 75.0)	return 0.0 + (1.0 - 0.0) * ((x - 30.0) / (75.0 - 30.0));
	if (x <= 100.0)	return 1.0 + (0.0 - 1.0) * ((x - 75.0) / (100.0 - 75.0));
}


// Print 
void FunctionBlock_car1::print() {
	printf("Function block car1:\n");
	printf("	Input  %20s : %f\n", "dystans", dystans);
	printf("	       %20s : %f\n", "dystans_bdlugi", dystans_bdlugi);
	printf("	       %20s : %f\n", "dystans_bkrotki", dystans_bkrotki);
	printf("	       %20s : %f\n", "dystans_dlugi", dystans_dlugi);
	printf("	       %20s : %f\n", "dystans_krotki", dystans_krotki);
	printf("	       %20s : %f\n", "dystans_sredni", dystans_sredni);
	printf("	Input  %20s : %f\n", "predkosc", predkosc);
	printf("	       %20s : %f\n", "predkosc_bduza", predkosc_bduza);
	printf("	       %20s : %f\n", "predkosc_bmala", predkosc_bmala);
	printf("	       %20s : %f\n", "predkosc_duza", predkosc_duza);
	printf("	       %20s : %f\n", "predkosc_mala", predkosc_mala);
	printf("	       %20s : %f\n", "Predkoscrednia", Predkoscrednia);
	printf("	Output %20s : %f\n", "zmiana_predkosci", zmiana_predkosci);
}
void FunctionBlock_car1::PrintThis() {
	printf("	Input  %20s : %f\n", "odleglosc", dystans);
	printf("	Input  %20s : %f\n", "predkosc", predkosc);
	printf("	Output %20s : %f\n", "zmiana predkosci", zmiana_predkosci);
}
// Reset output
void FunctionBlock_car1::reset() {
	for (int i = 0; i < 1000; i++) { defuzzify_zmiana_predkosci[i] = 0.0; }
}


int main(int argc, char *argv[]) {
	double dis = 1200;
	double time = 2.0;
	double sp = 0.0;
	double speed = 0.0; 
	double distance = 0.0; 
	int i = 0;
	
	
	FunctionBlock_car1 car1(dis, sp);

	while (dis > 0)
	{
		speed = car1.getSpeedChange();
		sp = car1.GetSpeed();

		car1.calc();
		car1.PrintThis();

		sp += speed;
		if (sp < 0)
		{
			sp = 0;
			break;
		}

		distance = time * ((sp*10) / 36);

		if (i > 5)
		{
			// generowanie przeszkody 
			if (dis - distance - (rand() % 1000))
			{
				dis = dis - distance - (rand() % 1000);
			}

			else 
			{
				dis = dis - distance;
			}
		}
		else
		{
			dis = dis - distance;
		}


		car1.setOdleglosc(dis);
		car1.SetSpeed(sp);

		i++;

	}

	// Parse input
	if (argc > 1) { car1.dystans = atof(argv[1]); }
	if (argc > 2) { car1.predkosc = atof(argv[2]); }

	// Calculate
	car1.calc();

	// Show results
	car1.print();
}


// Uruchomienie programu: Ctrl + F5 lub menu Debugowanie > Uruchom bez debugowania
// Debugowanie programu: F5 lub menu Debugowanie > Rozpocznij debugowanie

// Porady dotyczące rozpoczynania pracy:
//   1. Użyj okna Eksploratora rozwiązań, aby dodać pliki i zarządzać nimi
//   2. Użyj okna programu Team Explorer, aby nawiązać połączenie z kontrolą źródła
//   3. Użyj okna Dane wyjściowe, aby sprawdzić dane wyjściowe kompilacji i inne komunikaty
//   4. Użyj okna Lista błędów, aby zobaczyć błędy
//   5. Wybierz pozycję Projekt > Dodaj nowy element, aby utworzyć nowe pliki kodu, lub wybierz pozycję Projekt > Dodaj istniejący element, aby dodać istniejące pliku kodu do projektu
//   6. Aby w przyszłości ponownie otworzyć ten projekt, przejdź do pozycji Plik > Otwórz > Projekt i wybierz plik sln
